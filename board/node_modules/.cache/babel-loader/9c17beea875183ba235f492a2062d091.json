{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\user\\\\Desktop\\\\react\\uAC8C\\uC2DC\\uD310\\\\board\\\\src\\\\LoginForm.js\";\nimport React, { Component } from \"react\";\nimport { Form, Button } from \"react-bootstrap\";\nimport { loadReCaptcha, ReCaptcha } from \"react-recaptcha-v3\";\nimport axios from \"axios\";\n\nclass LoginForm extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.verifyCallback = recaptchaToken => {// Here you will get the final recaptchaToken!!!\n      //console.log(recaptchaToken, \"<= your recaptcha token\");\n    };\n\n    this.login = () => {\n      const loginEmail = this.loginEmail.value;\n      const loginPw = this.loginPw.value;\n\n      if (loginEmail === \"\" || loginEmail === undefined) {\n        alert(\"이메일 주소를 입력해주세요.\");\n        this.loginEmail.focus();\n        return;\n      } else if (loginPw === \"\" || loginPw === undefined) {\n        alert(\"비밀번호를 입력해주세요.\");\n        this.loginPw.focus();\n        return;\n      }\n\n      const send_param = {\n        //headers,\n        email: this.loginEmail.value,\n        password: this.loginPw.value\n      };\n      axios.post(\"http://localhost:8080/member/login\", send_param) //nodejs login에 파라미터 전송\n      .then(returnData => {\n        if (returnData.data.login_success) {\n          //session은 cookie 와 다르게 expire 지정 불가능\n          window.sessionStorage.setItem(\"login_id\", returnData.data._id);\n          window.sessionStorage.setItem(\"login_email\", returnData.data.email);\n          window.sessionStorage.setItem(\"login_name\", returnData.data.name);\n          alert(returnData.data.message); //reload해주기\n\n          window.location.reload();\n        } else {\n          alert(returnData.data.message);\n        }\n      }) //에러\n      .catch(err => {\n        console.log(err);\n      });\n    };\n  }\n\n  //reCAPTCHA 는  로봇이 아닙니다 검사인듯\n  componentDidMount() {\n    loadReCaptcha(\"6LfGieAUAAAAAJSOoqXS5VQdT_e5AH8u0n2e1PDb\");\n  }\n\n  render() {\n    //headers가 뭘까\n    //console.log(headers);\n    //style을 const에 담음\n    const formStyle = {\n      margin: 50\n    };\n    const buttonStyle = {\n      marginTop: 10\n    }; //부트스트랩 사용\n\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Login\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Form, {\n        style: formStyle,\n        children: /*#__PURE__*/_jsxDEV(Form.Group, {\n          controlClass: \"loginForm\",\n          children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n            children: \"Email address\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n            type: \"email\",\n            maxLength: \"100\",\n            ref: ref => this.loginEmail = ref,\n            placeholder: \"Enter email\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Form.Label, {\n            children: \"Password\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n            type: \"password\",\n            maxLength: \"20\",\n            ref: ref => this.loginPw = ref,\n            placeholder: \"Password\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(ReCaptcha, {\n            sitekey: \"6LfGieAUAAAAAJSOoqXS5VQdT_e5AH8u0n2e1PDb\",\n            action: \"login\",\n            verifyCallback: this.verifyCallback\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            style: buttonStyle,\n            onClick: this.login,\n            variant: \"primary\",\n            type: \"button\",\n            block: true,\n            children: \"\\uB85C\\uADF8\\uC778\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true);\n  }\n\n}\n\nexport default LoginForm;","map":{"version":3,"sources":["C:/Users/user/Desktop/react게시판/board/src/LoginForm.js"],"names":["React","Component","Form","Button","loadReCaptcha","ReCaptcha","axios","LoginForm","verifyCallback","recaptchaToken","login","loginEmail","value","loginPw","undefined","alert","focus","send_param","email","password","post","then","returnData","data","login_success","window","sessionStorage","setItem","_id","name","message","location","reload","catch","err","console","log","componentDidMount","render","formStyle","margin","buttonStyle","marginTop","ref"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport { Form, Button } from \"react-bootstrap\";\r\nimport { loadReCaptcha, ReCaptcha } from \"react-recaptcha-v3\";\r\nimport axios from \"axios\";\r\n\r\nclass LoginForm extends Component {\r\n  //reCAPTCHA 는  로봇이 아닙니다 검사인듯\r\n  componentDidMount() {\r\n    loadReCaptcha(\"6LfGieAUAAAAAJSOoqXS5VQdT_e5AH8u0n2e1PDb\");\r\n  }\r\n\r\n  verifyCallback = (recaptchaToken) => {\r\n    // Here you will get the final recaptchaToken!!!\r\n    //console.log(recaptchaToken, \"<= your recaptcha token\");\r\n  };\r\n\r\n  //로그인\r\n  login = () => {\r\n    const loginEmail = this.loginEmail.value;\r\n    const loginPw = this.loginPw.value;\r\n\r\n    if (loginEmail === \"\" || loginEmail === undefined) {\r\n      alert(\"이메일 주소를 입력해주세요.\");\r\n      this.loginEmail.focus();\r\n      return;\r\n    } else if (loginPw === \"\" || loginPw === undefined) {\r\n      alert(\"비밀번호를 입력해주세요.\");\r\n      this.loginPw.focus();\r\n      return;\r\n    }\r\n\r\n    const send_param = {\r\n      //headers,\r\n      email: this.loginEmail.value,\r\n      password: this.loginPw.value,\r\n    };\r\n    axios\r\n      .post(\"http://localhost:8080/member/login\", send_param)\r\n      //nodejs login에 파라미터 전송\r\n      .then((returnData) => {\r\n        if (returnData.data.login_success) {\r\n          //session은 cookie 와 다르게 expire 지정 불가능\r\n          window.sessionStorage.setItem(\"login_id\", returnData.data._id);\r\n          window.sessionStorage.setItem(\"login_email\", returnData.data.email);\r\n          window.sessionStorage.setItem(\"login_name\", returnData.data.name);\r\n          alert(returnData.data.message);\r\n          //reload해주기\r\n          window.location.reload();\r\n        } else {\r\n          alert(returnData.data.message);\r\n        }\r\n      }) //에러\r\n      .catch((err) => {\r\n        console.log(err);\r\n      });\r\n  };\r\n\r\n  render() {\r\n    //headers가 뭘까\r\n    //console.log(headers);\r\n\r\n    //style을 const에 담음\r\n    const formStyle = {\r\n      margin: 50,\r\n    };\r\n    const buttonStyle = {\r\n      marginTop: 10,\r\n    };\r\n\r\n    //부트스트랩 사용\r\n    return (\r\n      <>\r\n        <h1>Login</h1>\r\n        <Form style={formStyle}>\r\n          {/*LoginForm */}\r\n          <Form.Group controlClass=\"loginForm\">\r\n            <Form.Label>Email address</Form.Label>\r\n            <Form.Control\r\n              type=\"email\"\r\n              maxLength=\"100\"\r\n              ref={(ref) => (this.loginEmail = ref)}\r\n              placeholder=\"Enter email\"\r\n            />\r\n            <Form.Label>Password</Form.Label>\r\n            <Form.Control\r\n              type=\"password\"\r\n              maxLength=\"20\"\r\n              ref={(ref) => (this.loginPw = ref)}\r\n              placeholder=\"Password\"\r\n            />\r\n            <ReCaptcha\r\n              sitekey=\"6LfGieAUAAAAAJSOoqXS5VQdT_e5AH8u0n2e1PDb\"\r\n              action=\"login\"\r\n              verifyCallback={this.verifyCallback}\r\n            />\r\n            <Button\r\n              style={buttonStyle}\r\n              onClick={this.login}\r\n              variant=\"primary\"\r\n              type=\"button\"\r\n              block\r\n            >\r\n              로그인\r\n            </Button>\r\n          </Form.Group>\r\n        </Form>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default LoginForm;\r\n"]},"metadata":{},"sourceType":"module"}