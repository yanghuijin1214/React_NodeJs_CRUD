{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\user\\\\Desktop\\\\react\\uAC8C\\uC2DC\\uD310\\\\board\\\\src\\\\LoginForm.js\";\nimport React, { Component } from \"react\";\nimport { Form, Button } from \"react-bootstrap\";\nimport { loadReCaptcha, ReCaptcha } from \"react-recaptcha-v3\";\nimport axios from \"axios\";\n\nclass LoginForm extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.verifyCallback = recaptchaToken => {\n      // Here you will get the final recaptchaToken!!!\n      console.log(recaptchaToken, \"<= your recaptcha token\");\n    };\n\n    this.join = () => {\n      const joinEmail = this.joinEmail.value;\n      const joinName = this.joinName.value;\n      const joinPw = this.joinPw.value; //이메일 정규식\n\n      const regExp = /^[0-9a-zA-Z]([-_.]?[0-9a-zA-Z])*@[0-9a-zA-Z]([-_.]?[0-9a-zA-Z])*.[a-zA-Z]{2,3}$/i; //비밀번호 정규식. 숫자와 문자, 특수문자 포함 8~16자리\n\n      const regExp2 = /^(?=.*[a-zA-Z])(?=.*[!@#$%^*+=-])(?=.*[0-9]).{8,16}$/; //이메일 오류\n\n      if (joinEmail === \"\" || joinEmail === undefined) {\n        alert(\"이메일 주소를 입력해주세요.\");\n        this.joinEmail.focus();\n        return;\n      } else if (joinEmail.match(regExp) === null || joinEmail.match(regExp) === undefined) {\n        //이메일 형식에 맞지 않음.\n        alert(\"이메일 형식에 맞게 입력해주세요.\");\n        this.joinEmail.value = \"\";\n        this.joinEmail.focus();\n        return;\n      } else if (joinName === \"\" || joinName === undefined) {\n        alert(\"이름을 입력해주세요.\");\n        this.joinName.focus();\n        return;\n      } else if (joinPw === \"\" || joinPw === undefined) {\n        alert(\"비밀번호를 입력해주세요.\");\n        this.joinPw.focus();\n        return;\n      } else if (joinPw.match(regExp2) === null || joinPw.match(regExp2) === undefined) {\n        //비밀번호 형식 맞지 않으면\n        alert(\"비밀번호를 숫자와 문자, 특수문자 포함 8~16자리로 입력해주세요.\");\n        this.joinPw.value = \"\";\n        this.joinPw.focus();\n        return;\n      } //join 성공하면?\n      //백엔드로 넘겨줄 값\n\n\n      const send_param = {\n        headers,\n        email: this.joinEmail.value,\n        name: this.joinName.value,\n        password: this.joinPw.value\n      };\n      axios.post(\"http://localhost:8080/member/join\", send_param) //nodejs로 회원가입 정보 넘겨준다.\n      .then(returnData => {\n        if (returnData.data.message) {\n          //return 메시지 띄워주기\n          alert(returnData.data.message); //이메일 중복체크\n\n          if (returnData.data.dupYn === \"1\") {\n            this.joinEmail.value = \"\";\n            this.joinEmail.focus();\n          } else {\n            //회원가입 성공?\n            this.joinEmail.value = \"\";\n            this.joinName.value = \"\";\n            this.joinPw.value = \"\";\n          }\n        } else {\n          alert(\"회원가입에 실패하였습니다.\");\n        }\n      });\n    };\n  }\n\n  //reCAPTCHA 는  로봇이 아닙니다 검사인듯\n  componentDidMount() {\n    loadReCaptcha(\"6LfGieAUAAAAAJSOoqXS5VQdT_e5AH8u0n2e1PDb\");\n  }\n\n  render() {\n    //headers가 뭘까\n    console.log(headers); //style을 const에 담음\n\n    const formStyle = {\n      margin: 50\n    };\n    const buttonStyle = {\n      marginTop: 10\n    }; //부트스트랩 사용\n\n    return /*#__PURE__*/_jsxDEV(Form, {\n      style: formStyle,\n      children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n        controlId: \"joinForm\",\n        children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n          children: \"Email address\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n          type: \"email\",\n          maxLength: \"100\" //dom에 id를 지어주는 것.\n          //this.joinEmail을 통하여 이 dom에 접근 가능하다\n          ,\n          ref: ref => this.joinEmail = ref,\n          placeholder: \"Enter email\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Form.Text, {\n          className: \"text-muted\",\n          children: \"We'll never share your email with anyone else.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Form.Label, {\n          children: \"name\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n          type: \"text\",\n          maxLength: \"20\",\n          ref: ref => this.joinName = ref,\n          placeholder: \"name\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Form.Label, {\n          children: \"Password\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n          type: \"password\",\n          maxLength: \"64\",\n          ref: ref => this.joinPw = ref,\n          placeholder: \"Password\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          style: buttonStyle,\n          onClick: this.join //색깔\n          ,\n          variant: \"primary\",\n          type: \"button\" //block하면 한 block 크기 다 차지하도록 커짐\n          ,\n          block: true,\n          children: \"\\uD68C\\uC6D0\\uAC00\\uC785\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n        controlId: \"loginForm\",\n        children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n          children: \"Email address\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n          type: \"email\",\n          maxLength: \"100\",\n          ref: ref => this.loginEmail = ref,\n          placeholder: \"Enter email\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Form.Label, {\n          children: \"Password\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n          type: \"password\",\n          maxLength: \"20\",\n          ref: ref => this.loginPw = ref,\n          placeholder: \"Password\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ReCaptcha, {\n          sitekey: \"6LfGieAUAAAAAJSOoqXS5VQdT_e5AH8u0n2e1PDb\",\n          action: \"login\",\n          verifyCallback: this.verifyCallback\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          style: buttonStyle,\n          onClick: this.login,\n          variant: \"primary\",\n          type: \"button\",\n          children: \"\\uB85C\\uADF8\\uC778\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default LoginForm;","map":{"version":3,"sources":["C:/Users/user/Desktop/react게시판/board/src/LoginForm.js"],"names":["React","Component","Form","Button","loadReCaptcha","ReCaptcha","axios","LoginForm","verifyCallback","recaptchaToken","console","log","join","joinEmail","value","joinName","joinPw","regExp","regExp2","undefined","alert","focus","match","send_param","headers","email","name","password","post","then","returnData","data","message","dupYn","componentDidMount","render","formStyle","margin","buttonStyle","marginTop","ref","loginEmail","loginPw","login"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,IAAT,EAAeC,MAAf,QAA6B,iBAA7B;AACA,SAASC,aAAT,EAAwBC,SAAxB,QAAyC,oBAAzC;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,SAAN,SAAwBN,SAAxB,CAAkC;AAAA;AAAA;;AAAA,SAMhCO,cANgC,GAMdC,cAAD,IAAoB;AACnC;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYF,cAAZ,EAA4B,yBAA5B;AACD,KAT+B;;AAAA,SAYhCG,IAZgC,GAYzB,MAAM;AACX,YAAMC,SAAS,GAAG,KAAKA,SAAL,CAAeC,KAAjC;AACA,YAAMC,QAAQ,GAAG,KAAKA,QAAL,CAAcD,KAA/B;AACA,YAAME,MAAM,GAAG,KAAKA,MAAL,CAAYF,KAA3B,CAHW,CAIX;;AACA,YAAMG,MAAM,GAAG,kFAAf,CALW,CAMX;;AACA,YAAMC,OAAO,GAAG,sDAAhB,CAPW,CASX;;AACA,UAAIL,SAAS,KAAK,EAAd,IAAoBA,SAAS,KAAKM,SAAtC,EAAiD;AAC/CC,QAAAA,KAAK,CAAC,iBAAD,CAAL;AACA,aAAKP,SAAL,CAAeQ,KAAf;AACA;AACD,OAJD,MAIO,IACLR,SAAS,CAACS,KAAV,CAAgBL,MAAhB,MAA4B,IAA5B,IACAJ,SAAS,CAACS,KAAV,CAAgBL,MAAhB,MAA4BE,SAFvB,EAGL;AACA;AACAC,QAAAA,KAAK,CAAC,oBAAD,CAAL;AACA,aAAKP,SAAL,CAAeC,KAAf,GAAuB,EAAvB;AACA,aAAKD,SAAL,CAAeQ,KAAf;AACA;AACD,OATM,MASA,IAAIN,QAAQ,KAAK,EAAb,IAAmBA,QAAQ,KAAKI,SAApC,EAA+C;AACpDC,QAAAA,KAAK,CAAC,aAAD,CAAL;AACA,aAAKL,QAAL,CAAcM,KAAd;AACA;AACD,OAJM,MAIA,IAAIL,MAAM,KAAK,EAAX,IAAiBA,MAAM,KAAKG,SAAhC,EAA2C;AAChDC,QAAAA,KAAK,CAAC,eAAD,CAAL;AACA,aAAKJ,MAAL,CAAYK,KAAZ;AACA;AACD,OAJM,MAIA,IACLL,MAAM,CAACM,KAAP,CAAaJ,OAAb,MAA0B,IAA1B,IACAF,MAAM,CAACM,KAAP,CAAaJ,OAAb,MAA0BC,SAFrB,EAGL;AACA;AACAC,QAAAA,KAAK,CAAC,uCAAD,CAAL;AACA,aAAKJ,MAAL,CAAYF,KAAZ,GAAoB,EAApB;AACA,aAAKE,MAAL,CAAYK,KAAZ;AACA;AACD,OAxCU,CA0CX;AACA;;;AACA,YAAME,UAAU,GAAG;AACjBC,QAAAA,OADiB;AAEjBC,QAAAA,KAAK,EAAE,KAAKZ,SAAL,CAAeC,KAFL;AAGjBY,QAAAA,IAAI,EAAE,KAAKX,QAAL,CAAcD,KAHH;AAIjBa,QAAAA,QAAQ,EAAE,KAAKX,MAAL,CAAYF;AAJL,OAAnB;AAMAR,MAAAA,KAAK,CACFsB,IADH,CACQ,mCADR,EAC6CL,UAD7C,EAEE;AAFF,OAGGM,IAHH,CAGSC,UAAD,IAAgB;AACpB,YAAIA,UAAU,CAACC,IAAX,CAAgBC,OAApB,EAA6B;AAC3B;AACAZ,UAAAA,KAAK,CAACU,UAAU,CAACC,IAAX,CAAgBC,OAAjB,CAAL,CAF2B,CAG3B;;AACA,cAAIF,UAAU,CAACC,IAAX,CAAgBE,KAAhB,KAA0B,GAA9B,EAAmC;AACjC,iBAAKpB,SAAL,CAAeC,KAAf,GAAuB,EAAvB;AACA,iBAAKD,SAAL,CAAeQ,KAAf;AACD,WAHD,MAGO;AACL;AACA,iBAAKR,SAAL,CAAeC,KAAf,GAAuB,EAAvB;AACA,iBAAKC,QAAL,CAAcD,KAAd,GAAsB,EAAtB;AACA,iBAAKE,MAAL,CAAYF,KAAZ,GAAoB,EAApB;AACD;AACF,SAbD,MAaO;AACLM,UAAAA,KAAK,CAAC,gBAAD,CAAL;AACD;AACF,OApBH;AAqBD,KAnF+B;AAAA;;AAChC;AACAc,EAAAA,iBAAiB,GAAG;AAClB9B,IAAAA,aAAa,CAAC,0CAAD,CAAb;AACD;;AAgFD+B,EAAAA,MAAM,GAAG;AACP;AACAzB,IAAAA,OAAO,CAACC,GAAR,CAAYa,OAAZ,EAFO,CAIP;;AACA,UAAMY,SAAS,GAAG;AAChBC,MAAAA,MAAM,EAAE;AADQ,KAAlB;AAGA,UAAMC,WAAW,GAAG;AAClBC,MAAAA,SAAS,EAAE;AADO,KAApB,CARO,CAYP;;AACA,wBACE,QAAC,IAAD;AAAM,MAAA,KAAK,EAAEH,SAAb;AAAA,8BACE,QAAC,IAAD,CAAM,KAAN;AAAY,QAAA,SAAS,EAAC,UAAtB;AAAA,gCACE,QAAC,IAAD,CAAM,KAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE,QAAC,IAAD,CAAM,OAAN;AACE,UAAA,IAAI,EAAC,OADP;AAEE,UAAA,SAAS,EAAC,KAFZ,CAGE;AACA;AAJF;AAKE,UAAA,GAAG,EAAGI,GAAD,IAAU,KAAK3B,SAAL,GAAiB2B,GALlC;AAME,UAAA,WAAW,EAAC;AANd;AAAA;AAAA;AAAA;AAAA,gBAFF,eAUE,QAAC,IAAD,CAAM,IAAN;AAAW,UAAA,SAAS,EAAC,YAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAVF,eAcE,QAAC,IAAD,CAAM,KAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAdF,eAeE,QAAC,IAAD,CAAM,OAAN;AACE,UAAA,IAAI,EAAC,MADP;AAEE,UAAA,SAAS,EAAC,IAFZ;AAGE,UAAA,GAAG,EAAGA,GAAD,IAAU,KAAKzB,QAAL,GAAgByB,GAHjC;AAIE,UAAA,WAAW,EAAC;AAJd;AAAA;AAAA;AAAA;AAAA,gBAfF,eAqBE,QAAC,IAAD,CAAM,KAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBArBF,eAsBE,QAAC,IAAD,CAAM,OAAN;AACE,UAAA,IAAI,EAAC,UADP;AAEE,UAAA,SAAS,EAAC,IAFZ;AAGE,UAAA,GAAG,EAAGA,GAAD,IAAU,KAAKxB,MAAL,GAAcwB,GAH/B;AAIE,UAAA,WAAW,EAAC;AAJd;AAAA;AAAA;AAAA;AAAA,gBAtBF,eA4BE,QAAC,MAAD;AACE,UAAA,KAAK,EAAEF,WADT;AAEE,UAAA,OAAO,EAAE,KAAK1B,IAFhB,CAGE;AAHF;AAIE,UAAA,OAAO,EAAC,SAJV;AAKE,UAAA,IAAI,EAAC,QALP,CAME;AANF;AAOE,UAAA,KAAK,MAPP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBA5BF;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eA2CE,QAAC,IAAD,CAAM,KAAN;AAAY,QAAA,SAAS,EAAC,WAAtB;AAAA,gCACE,QAAC,IAAD,CAAM,KAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE,QAAC,IAAD,CAAM,OAAN;AACE,UAAA,IAAI,EAAC,OADP;AAEE,UAAA,SAAS,EAAC,KAFZ;AAGE,UAAA,GAAG,EAAG4B,GAAD,IAAU,KAAKC,UAAL,GAAkBD,GAHnC;AAIE,UAAA,WAAW,EAAC;AAJd;AAAA;AAAA;AAAA;AAAA,gBAFF,eAQE,QAAC,IAAD,CAAM,KAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBARF,eASE,QAAC,IAAD,CAAM,OAAN;AACE,UAAA,IAAI,EAAC,UADP;AAEE,UAAA,SAAS,EAAC,IAFZ;AAGE,UAAA,GAAG,EAAGA,GAAD,IAAU,KAAKE,OAAL,GAAeF,GAHhC;AAIE,UAAA,WAAW,EAAC;AAJd;AAAA;AAAA;AAAA;AAAA,gBATF,eAeE,QAAC,SAAD;AACE,UAAA,OAAO,EAAC,0CADV;AAEE,UAAA,MAAM,EAAC,OAFT;AAGE,UAAA,cAAc,EAAE,KAAKhC;AAHvB;AAAA;AAAA;AAAA;AAAA,gBAfF,eAoBE,QAAC,MAAD;AACE,UAAA,KAAK,EAAE8B,WADT;AAEE,UAAA,OAAO,EAAE,KAAKK,KAFhB;AAGE,UAAA,OAAO,EAAC,SAHV;AAIE,UAAA,IAAI,EAAC,QAJP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBApBF;AAAA;AAAA;AAAA;AAAA;AAAA,cA3CF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AA2ED;;AA5K+B;;AA+KlC,eAAepC,SAAf","sourcesContent":["import React, { Component } from \"react\";\r\nimport { Form, Button } from \"react-bootstrap\";\r\nimport { loadReCaptcha, ReCaptcha } from \"react-recaptcha-v3\";\r\nimport axios from \"axios\";\r\n\r\nclass LoginForm extends Component {\r\n  //reCAPTCHA 는  로봇이 아닙니다 검사인듯\r\n  componentDidMount() {\r\n    loadReCaptcha(\"6LfGieAUAAAAAJSOoqXS5VQdT_e5AH8u0n2e1PDb\");\r\n  }\r\n\r\n  verifyCallback = (recaptchaToken) => {\r\n    // Here you will get the final recaptchaToken!!!\r\n    console.log(recaptchaToken, \"<= your recaptcha token\");\r\n  };\r\n\r\n  //회원가입\r\n  join = () => {\r\n    const joinEmail = this.joinEmail.value;\r\n    const joinName = this.joinName.value;\r\n    const joinPw = this.joinPw.value;\r\n    //이메일 정규식\r\n    const regExp = /^[0-9a-zA-Z]([-_.]?[0-9a-zA-Z])*@[0-9a-zA-Z]([-_.]?[0-9a-zA-Z])*.[a-zA-Z]{2,3}$/i;\r\n    //비밀번호 정규식. 숫자와 문자, 특수문자 포함 8~16자리\r\n    const regExp2 = /^(?=.*[a-zA-Z])(?=.*[!@#$%^*+=-])(?=.*[0-9]).{8,16}$/;\r\n\r\n    //이메일 오류\r\n    if (joinEmail === \"\" || joinEmail === undefined) {\r\n      alert(\"이메일 주소를 입력해주세요.\");\r\n      this.joinEmail.focus();\r\n      return;\r\n    } else if (\r\n      joinEmail.match(regExp) === null ||\r\n      joinEmail.match(regExp) === undefined\r\n    ) {\r\n      //이메일 형식에 맞지 않음.\r\n      alert(\"이메일 형식에 맞게 입력해주세요.\");\r\n      this.joinEmail.value = \"\";\r\n      this.joinEmail.focus();\r\n      return;\r\n    } else if (joinName === \"\" || joinName === undefined) {\r\n      alert(\"이름을 입력해주세요.\");\r\n      this.joinName.focus();\r\n      return;\r\n    } else if (joinPw === \"\" || joinPw === undefined) {\r\n      alert(\"비밀번호를 입력해주세요.\");\r\n      this.joinPw.focus();\r\n      return;\r\n    } else if (\r\n      joinPw.match(regExp2) === null ||\r\n      joinPw.match(regExp2) === undefined\r\n    ) {\r\n      //비밀번호 형식 맞지 않으면\r\n      alert(\"비밀번호를 숫자와 문자, 특수문자 포함 8~16자리로 입력해주세요.\");\r\n      this.joinPw.value = \"\";\r\n      this.joinPw.focus();\r\n      return;\r\n    }\r\n\r\n    //join 성공하면?\r\n    //백엔드로 넘겨줄 값\r\n    const send_param = {\r\n      headers,\r\n      email: this.joinEmail.value,\r\n      name: this.joinName.value,\r\n      password: this.joinPw.value,\r\n    };\r\n    axios\r\n      .post(\"http://localhost:8080/member/join\", send_param)\r\n      //nodejs로 회원가입 정보 넘겨준다.\r\n      .then((returnData) => {\r\n        if (returnData.data.message) {\r\n          //return 메시지 띄워주기\r\n          alert(returnData.data.message);\r\n          //이메일 중복체크\r\n          if (returnData.data.dupYn === \"1\") {\r\n            this.joinEmail.value = \"\";\r\n            this.joinEmail.focus();\r\n          } else {\r\n            //회원가입 성공?\r\n            this.joinEmail.value = \"\";\r\n            this.joinName.value = \"\";\r\n            this.joinPw.value = \"\";\r\n          }\r\n        } else {\r\n          alert(\"회원가입에 실패하였습니다.\");\r\n        }\r\n      });\r\n  };\r\n  render() {\r\n    //headers가 뭘까\r\n    console.log(headers);\r\n\r\n    //style을 const에 담음\r\n    const formStyle = {\r\n      margin: 50,\r\n    };\r\n    const buttonStyle = {\r\n      marginTop: 10,\r\n    };\r\n\r\n    //부트스트랩 사용\r\n    return (\r\n      <Form style={formStyle}>\r\n        <Form.Group controlId=\"joinForm\">\r\n          <Form.Label>Email address</Form.Label>\r\n          <Form.Control\r\n            type=\"email\"\r\n            maxLength=\"100\"\r\n            //dom에 id를 지어주는 것.\r\n            //this.joinEmail을 통하여 이 dom에 접근 가능하다\r\n            ref={(ref) => (this.joinEmail = ref)}\r\n            placeholder=\"Enter email\"\r\n          />\r\n          <Form.Text className=\"text-muted\">\r\n            We'll never share your email with anyone else.\r\n          </Form.Text>\r\n\r\n          <Form.Label>name</Form.Label>\r\n          <Form.Control\r\n            type=\"text\"\r\n            maxLength=\"20\"\r\n            ref={(ref) => (this.joinName = ref)}\r\n            placeholder=\"name\"\r\n          />\r\n          <Form.Label>Password</Form.Label>\r\n          <Form.Control\r\n            type=\"password\"\r\n            maxLength=\"64\"\r\n            ref={(ref) => (this.joinPw = ref)}\r\n            placeholder=\"Password\"\r\n          />\r\n          <Button\r\n            style={buttonStyle}\r\n            onClick={this.join}\r\n            //색깔\r\n            variant=\"primary\"\r\n            type=\"button\"\r\n            //block하면 한 block 크기 다 차지하도록 커짐\r\n            block\r\n          >\r\n            회원가입\r\n          </Button>\r\n        </Form.Group>\r\n\r\n        {/*LoginForm */}\r\n        <Form.Group controlId=\"loginForm\">\r\n          <Form.Label>Email address</Form.Label>\r\n          <Form.Control\r\n            type=\"email\"\r\n            maxLength=\"100\"\r\n            ref={(ref) => (this.loginEmail = ref)}\r\n            placeholder=\"Enter email\"\r\n          />\r\n          <Form.Label>Password</Form.Label>\r\n          <Form.Control\r\n            type=\"password\"\r\n            maxLength=\"20\"\r\n            ref={(ref) => (this.loginPw = ref)}\r\n            placeholder=\"Password\"\r\n          />\r\n          <ReCaptcha\r\n            sitekey=\"6LfGieAUAAAAAJSOoqXS5VQdT_e5AH8u0n2e1PDb\"\r\n            action=\"login\"\r\n            verifyCallback={this.verifyCallback}\r\n          />\r\n          <Button\r\n            style={buttonStyle}\r\n            onClick={this.login}\r\n            variant=\"primary\"\r\n            type=\"button\"\r\n          >\r\n            로그인\r\n          </Button>\r\n        </Form.Group>\r\n      </Form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default LoginForm;\r\n"]},"metadata":{},"sourceType":"module"}