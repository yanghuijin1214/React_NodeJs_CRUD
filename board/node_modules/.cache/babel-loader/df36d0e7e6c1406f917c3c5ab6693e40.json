{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\user\\\\Desktop\\\\react\\uAC8C\\uC2DC\\uD310\\\\board\\\\src\\\\CalendarForm.js\";\nimport React from \"react\";\nimport { Card } from \"react-bootstrap\";\nimport FullCalendar, { formatDate } from \"@fullcalendar/react\";\nimport dayGridPlugin from \"@fullcalendar/daygrid\";\nimport timeGridPlugin from \"@fullcalendar/timegrid\";\nimport interactionPlugin from \"@fullcalendar/interaction\";\nimport { INITIAL_EVENTS, createEventId } from \"./event-utils\";\nexport default class CalendarForm extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      weekendsVisible: true,\n      currentEvents: []\n    };\n\n    this.handleDateSelect = selectInfo => {\n      let title = prompt(\"새로운 일정 내용을 입력하세요.\");\n      let calendarApi = selectInfo.view.calendar;\n      calendarApi.unselect(); // clear date selection\n      //event 추가\n\n      if (title) {\n        calendarApi.addEvent({\n          id: createEventId(),\n          title,\n          start: selectInfo.startStr,\n          end: selectInfo.endStr,\n          allDay: selectInfo.allDay\n        });\n      }\n    };\n\n    this.handleEventClick = clickInfo => {\n      if (window.confirm(`'${clickInfo.event.title}' 일정을 삭제하시겠습니까?`)) {\n        clickInfo.event.remove();\n        window.alert(\"삭제되었습니다.\");\n      }\n    };\n\n    this.handleEvents = events => {\n      this.setState({\n        currentEvents: events\n      });\n    };\n  }\n\n  render() {\n    const CalendarStyle = {\n      width: \"80%\",\n      textAlign: \"Center\",\n      margin: \"0 auto\",\n      marginTop: 20,\n      listStyle: \"none\"\n    };\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"demo-app\",\n      style: {\n        textAlign: \"center\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(Card, {\n        children: /*#__PURE__*/_jsxDEV(Card.Body, {\n          children: [\"Select dates and you will be prompted to create a new event \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 27,\n            columnNumber: 73\n          }, this), \"Drag, drop, and resize events \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 28,\n            columnNumber: 43\n          }, this), \"Click an event to delete it\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"demo-app-main\",\n        style: CalendarStyle,\n        children: /*#__PURE__*/_jsxDEV(FullCalendar, {\n          plugins: [dayGridPlugin, timeGridPlugin, interactionPlugin],\n          headerToolbar: {\n            left: \"prev,next today\",\n            center: \"title\",\n            right: \"dayGridMonth,timeGridWeek,timeGridDay\"\n          },\n          initialView: \"dayGridMonth\",\n          editable: true,\n          selectable: true,\n          selectMirror: true,\n          dayMaxEvents: true,\n          initialEvents: INITIAL_EVENTS // alternatively, use the `events` setting to fetch from a feed\n          ,\n          select: this.handleDateSelect,\n          eventContent: renderEventContent // custom render function\n          ,\n          eventClick: this.handleEventClick,\n          eventsSet: this.handleEvents // called after events are initialized/added/changed/removed\n\n          /* you can update a remote database when these fire:\r\n          eventAdd={function(){}}\r\n          eventChange={function(){}}\r\n          eventRemove={function(){}}\r\n          */\n\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nfunction renderEventContent(eventInfo) {\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"b\", {\n      children: eventInfo.timeText\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"i\", {\n      children: eventInfo.event.title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n} // function renderSidebarEvent(event) {\n//   return (\n//     <li key={event.id}>\n//       <b>\n//         {formatDate(event.start, {\n//           year: \"numeric\",\n//           month: \"short\",\n//           day: \"numeric\",\n//         })}\n//       </b>\n//       <i>{event.title}</i>\n//     </li>\n//   );\n// }","map":{"version":3,"sources":["C:/Users/user/Desktop/react게시판/board/src/CalendarForm.js"],"names":["React","Card","FullCalendar","formatDate","dayGridPlugin","timeGridPlugin","interactionPlugin","INITIAL_EVENTS","createEventId","CalendarForm","Component","state","weekendsVisible","currentEvents","handleDateSelect","selectInfo","title","prompt","calendarApi","view","calendar","unselect","addEvent","id","start","startStr","end","endStr","allDay","handleEventClick","clickInfo","window","confirm","event","remove","alert","handleEvents","events","setState","render","CalendarStyle","width","textAlign","margin","marginTop","listStyle","left","center","right","renderEventContent","eventInfo","timeText"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport { Card } from \"react-bootstrap\";\r\nimport FullCalendar, { formatDate } from \"@fullcalendar/react\";\r\nimport dayGridPlugin from \"@fullcalendar/daygrid\";\r\nimport timeGridPlugin from \"@fullcalendar/timegrid\";\r\nimport interactionPlugin from \"@fullcalendar/interaction\";\r\nimport { INITIAL_EVENTS, createEventId } from \"./event-utils\";\r\n\r\nexport default class CalendarForm extends React.Component {\r\n  state = {\r\n    weekendsVisible: true,\r\n    currentEvents: [],\r\n  };\r\n\r\n  render() {\r\n    const CalendarStyle = {\r\n      width: \"80%\",\r\n      textAlign: \"Center\",\r\n      margin: \"0 auto\",\r\n      marginTop: 20,\r\n      listStyle: \"none\",\r\n    };\r\n    return (\r\n      <div className=\"demo-app\" style={{ textAlign: \"center\" }}>\r\n        <Card>\r\n          <Card.Body>\r\n            Select dates and you will be prompted to create a new event <br />\r\n            Drag, drop, and resize events <br />\r\n            Click an event to delete it\r\n          </Card.Body>\r\n        </Card>\r\n        <div className=\"demo-app-main\" style={CalendarStyle}>\r\n          <FullCalendar\r\n            plugins={[dayGridPlugin, timeGridPlugin, interactionPlugin]}\r\n            headerToolbar={{\r\n              left: \"prev,next today\",\r\n              center: \"title\",\r\n              right: \"dayGridMonth,timeGridWeek,timeGridDay\",\r\n            }}\r\n            initialView=\"dayGridMonth\"\r\n            editable={true}\r\n            selectable={true}\r\n            selectMirror={true}\r\n            dayMaxEvents={true}\r\n            initialEvents={INITIAL_EVENTS} // alternatively, use the `events` setting to fetch from a feed\r\n            select={this.handleDateSelect}\r\n            eventContent={renderEventContent} // custom render function\r\n            eventClick={this.handleEventClick}\r\n            eventsSet={this.handleEvents} // called after events are initialized/added/changed/removed\r\n            /* you can update a remote database when these fire:\r\n            eventAdd={function(){}}\r\n            eventChange={function(){}}\r\n            eventRemove={function(){}}\r\n            */\r\n          />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  handleDateSelect = (selectInfo) => {\r\n    let title = prompt(\"새로운 일정 내용을 입력하세요.\");\r\n    let calendarApi = selectInfo.view.calendar;\r\n\r\n    calendarApi.unselect(); // clear date selection\r\n\r\n    //event 추가\r\n    if (title) {\r\n      calendarApi.addEvent({\r\n        id: createEventId(),\r\n        title,\r\n        start: selectInfo.startStr,\r\n        end: selectInfo.endStr,\r\n        allDay: selectInfo.allDay,\r\n      });\r\n    }\r\n  };\r\n\r\n  handleEventClick = (clickInfo) => {\r\n    if (window.confirm(`'${clickInfo.event.title}' 일정을 삭제하시겠습니까?`)) {\r\n      clickInfo.event.remove();\r\n      window.alert(\"삭제되었습니다.\");\r\n    }\r\n  };\r\n\r\n  handleEvents = (events) => {\r\n    this.setState({\r\n      currentEvents: events,\r\n    });\r\n  };\r\n}\r\n\r\nfunction renderEventContent(eventInfo) {\r\n  return (\r\n    <>\r\n      <b>{eventInfo.timeText}</b>\r\n      <i>{eventInfo.event.title}</i>\r\n    </>\r\n  );\r\n}\r\n\r\n// function renderSidebarEvent(event) {\r\n//   return (\r\n//     <li key={event.id}>\r\n//       <b>\r\n//         {formatDate(event.start, {\r\n//           year: \"numeric\",\r\n//           month: \"short\",\r\n//           day: \"numeric\",\r\n//         })}\r\n//       </b>\r\n//       <i>{event.title}</i>\r\n//     </li>\r\n//   );\r\n// }\r\n"]},"metadata":{},"sourceType":"module"}